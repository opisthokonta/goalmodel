// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CMP_normalizing_constant
Rcpp::NumericVector CMP_normalizing_constant(Rcpp::NumericVector& lambda, Rcpp::NumericVector& upsilon, double error);
RcppExport SEXP _goalmodel_CMP_normalizing_constant(SEXP lambdaSEXP, SEXP upsilonSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(CMP_normalizing_constant(lambda, upsilon, error));
    return rcpp_result_gen;
END_RCPP
}
// dCMP
Rcpp::NumericVector dCMP(Rcpp::IntegerVector& x, Rcpp::NumericVector& lambda, Rcpp::NumericVector& upsilon, bool log, double error);
RcppExport SEXP _goalmodel_dCMP(SEXP xSEXP, SEXP lambdaSEXP, SEXP upsilonSEXP, SEXP logSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(dCMP(x, lambda, upsilon, log, error));
    return rcpp_result_gen;
END_RCPP
}
// pCMP
Rcpp::NumericVector pCMP(Rcpp::IntegerVector& q, Rcpp::NumericVector& lambda, Rcpp::NumericVector& upsilon, bool lower_tail, double error);
RcppExport SEXP _goalmodel_pCMP(SEXP qSEXP, SEXP lambdaSEXP, SEXP upsilonSEXP, SEXP lower_tailSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(pCMP(q, lambda, upsilon, lower_tail, error));
    return rcpp_result_gen;
END_RCPP
}
// qCMP
Rcpp::NumericVector qCMP(Rcpp::NumericVector& p, Rcpp::NumericVector& lambda, Rcpp::NumericVector& upsilon, bool lower_tail, double error);
RcppExport SEXP _goalmodel_qCMP(SEXP pSEXP, SEXP lambdaSEXP, SEXP upsilonSEXP, SEXP lower_tailSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(qCMP(p, lambda, upsilon, lower_tail, error));
    return rcpp_result_gen;
END_RCPP
}
// eCMP
Rcpp::NumericVector eCMP(Rcpp::NumericVector& lambda, Rcpp::NumericVector& upsilon, std::string method, double error);
RcppExport SEXP _goalmodel_eCMP(SEXP lambdaSEXP, SEXP upsilonSEXP, SEXP methodSEXP, SEXP errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    rcpp_result_gen = Rcpp::wrap(eCMP(lambda, upsilon, method, error));
    return rcpp_result_gen;
END_RCPP
}
// lambda_approx
Rcpp::NumericVector lambda_approx(Rcpp::NumericVector& mu, Rcpp::NumericVector& upsilon);
RcppExport SEXP _goalmodel_lambda_approx(SEXP muSEXP, SEXP upsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upsilon(upsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_approx(mu, upsilon));
    return rcpp_result_gen;
END_RCPP
}
// lambda_cond
double lambda_cond(double& lambda, double& mu, double& upsilon, int ul);
RcppExport SEXP _goalmodel_lambda_cond(SEXP lambdaSEXP, SEXP muSEXP, SEXP upsilonSEXP, SEXP ulSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< int >::type ul(ulSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_cond(lambda, mu, upsilon, ul));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_goalmodel_CMP_normalizing_constant", (DL_FUNC) &_goalmodel_CMP_normalizing_constant, 3},
    {"_goalmodel_dCMP", (DL_FUNC) &_goalmodel_dCMP, 5},
    {"_goalmodel_pCMP", (DL_FUNC) &_goalmodel_pCMP, 5},
    {"_goalmodel_qCMP", (DL_FUNC) &_goalmodel_qCMP, 5},
    {"_goalmodel_eCMP", (DL_FUNC) &_goalmodel_eCMP, 4},
    {"_goalmodel_lambda_approx", (DL_FUNC) &_goalmodel_lambda_approx, 2},
    {"_goalmodel_lambda_cond", (DL_FUNC) &_goalmodel_lambda_cond, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_goalmodel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
